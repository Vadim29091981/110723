1.Как отказаться от изменений в файле (файлах) находящихся в рабочем каталоге?

Для отмены изменений в файлах в рабочем каталоге можно использовать команду git checkout:

bash
Copy code
git checkout -- <файлы>
Эта команда восстановит файлы в их состояние на последнем коммите.

2.Как вернуть файл из индекса в рабочий каталог?

Для возврата файла из индекса (staging area) в рабочий каталог, можно использовать команду git reset с опцией -- <файлы>:

bash
Copy code
git reset -- <файлы>
Это уберет файлы из индекса, сохраняя при этом изменения в рабочем каталоге.

3.Как отменить ошибочный commit?

Если вы хотите отменить последний commit, вы можете использовать команду git reset с опцией --soft для сохранения изменений в рабочем каталоге:

bash
Copy code
git reset --soft HEAD~1
Если вы хотите полностью удалить последний commit (включая изменения), используйте опцию --hard вместо --soft.

4.Как исправить коммит, отправленный на сервер GitHub?

Если вы уже отправили коммит на GitHub, и вам нужно внести исправления, вы можете использовать следующие команды:

Внесите изменения в файлы в рабочем каталоге.
Добавьте изменения в индекс с помощью git add.
Используйте команду git commit --amend:
bash
Copy code
git commit --amend
Это изменит последний коммит. После этого вам придется push измененный коммит на сервер.

5.Как создать новую ветку и переключиться в нее?

Для создания новой ветки и переключения в нее, используйте команду git checkout -b <имя_ветки>:

bash
Copy code
git checkout -b новая_ветка
Это создаст новую ветку и автоматически переключит вас на нее.

В чем отличие между fast-forward merge и non fast-forward merge?

Fast-forward merge происходит, когда история изменений в ветке, в которую вы хотите слить другую ветку, линейна, и Git может просто переместить указатель ветки вперед к новой ветке без создания дополнительного коммита слияния. Это происходит, когда изменения в сливаемой ветке не конфликтуют с базовой веткой.

Non fast-forward merge происходит, когда история изменений в сливаемой ветке не линейна и Git создает дополнительный коммит слияния. Это происходит, когда есть конфликты с базовой веткой, или когда изменения в обеих ветках не могут быть просто объединены.

6.Можно ли удалить ветку? Как?

Да, вы можете удалить ветку в Git с помощью команды git branch -d для удаления локальной ветки:

bash
Copy code
git branch -d <имя_ветки>
Если ветка не была полностью слита и вы уверены, что хотите ее удалить, используйте опцию -D:

bash
Copy code
git branch -D <имя_ветки>
Для удаления ветки на удаленном сервере (например, GitHub), используйте команду git push:

bash
Copy code
git push origin --delete <имя_удаляемой_ветки>
Это удалит ветку на удаленном сервере.